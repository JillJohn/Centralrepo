     Git Commands:-
      
      git init - will only track a particular directory in which git is initialized.
      
      git status - will show the status of the files that are newly created, modified or deleted.
      
      git add filename OR git add . - will add a particular or all the files into the staging area and it can now be tracked them before committing them into Git.
      
      git commit -m "add a message" will commit the changes in the git.
      
      git commit -am "add a message" will add the files into the staging area and commit it also.
      
      git restore --staged filename will move the files from the staging area to the unstaging area. In this way, the data will be reverted back.
      
      git log will show the history of all the git commits.
      
      git reset hash value will move the data from the committing area to the unstaging area. Provide the previous hash value if you want to delete the next one.
      
      git stash will store the data temporarily somewhere in the memory. The changes won't be committed. Instead it has to be added to the staging area and then it can go to the stashing area.
      
      git stash push -m "add a message" will store the data temporarily in the git stash.
      
      git stash list will show the list of data that are temporarily stored.
      
      git stash clear will delete the list of data that are present in the git stash.
      
      git stash apply index number will call the stashing in which you want to make changes.
      
      git stash drop index number will delete a specific data from the stashing list.
      
      git stash pop index number will transfer the specific index number data out of the stashing area so that it can be further committed. It means that the data is now able to be added into the staging area and committed also.
      
      rm -rf .git will unintialize the git. It means that all the branches will be deleted from Git.
      
      git branch - will show the list of branches of Git. Branch is created to divide the data functionalities or use cases.
      
      git branch branchname - will create a new branch.
      
      git checkout branchname - will help you switch to another branch.
                  
      git rebase -i hash value - will merge multiple commits into a single commit.
                  
      git merge branchname - will merge the branch into another. Here the name of the branch would a branch that you want to merge into another branchOn 
      
      Click on the plus button to create a new repository.
      git remote add origin repo-copy/link.git will add the local storage or the origin into the remote server.
      
      git remote -v will give the links of all the repositories from where the data was added or is to be added.
      
      When the repository is first created, git push origin branch name will push the data from the branch name and upload it on GitHub.
      
      Click on the commit link to see the history of commits.
      
      Click on the fork button to make a copy of someone else's repository in your own account.
      
      git clone repository-link.git will download the repository data into your local storage.
      
      Origin Repository
      
      The copy of the repository that is forked from someone else's account and now it is present in your own account will be called origin.
      
      Upstream Repository
      Upstream is the original repo that you have forked from an original account.
      
      git remote rm origin will delete the origin data form your local repository.
      
      git remote add upstream original-repo/link.git will add the data of the original repository.
      
      git push origin branchname will send a pull request to the upstream account from the origin account so that upstream could merge those changes into itself.
      In the pull request section,
      Merge pull request option will be appeared so that the owner of the repository could merge the requested data into itself.
      
      git fetch --all â€“prune will fetch all the data from the upstream or the original account and transfer it to the origin account or a person's repository who forked it.
      Prune means that only the relevant data will be fetched.
      
      git reset --hard upstream/main will delete all your local changes to main.
      
      git pull upstream main will fetch the data from the upstream and delete all the local changes also.
      
      Merge conflict will arise if there are multiple changes are committed on the same line.
